dgn_p=pvals$Glearnt
colnames(dgn_p)=to.test[1:30]
env=to.test[to.test.index]
gtex_name=mapping[env]
p=dgn_p[, env]
p=p[!is.na(p)]
dgn_alt=alt.list
dgn_n=n.list
dgn_x=x.full
dgn_null=x.null
load("locusinfo.RData")
locusinfo=locusinfo[,1:8]
locusinfo$chrpos=paste(locusinfo$chr.x, locusinfo$pos, sep=":")
dgn_oi=original.index
#load(paste0("~/Google Drive/EAGLE/gtex.eagle.no.eqtls.",gtex_name,".RData")) -> a
load(paste0("~/Google Drive/EAGLE/gtex.eagle.ciseqtls.",gtex_name,".RData")) -> a
length(original.index)
pos=pos$SITES
x.full=foreach(x=x.full) %do% { if (ncol(x)>=3) x[,c(2,3,1,3+seq_len(ncol(x)-3))] else x[,c(2,1)] }
require(ggplot2)
require(gridExtra)
for (order_index in 1:10) {
dgn_index=order(p)[order_index]
snp=locusinfo$chrpos[ dgn_oi[dgn_index] ]
gene_name=as.character(locusinfo[ dgn_oi[dgn_index], "gene" ])
print(gene_name)
gtex_index=which( snp == as.character(pos[original.index]) )
print(gtex_index)
if (length(gtex_index)>0) {
bb=(foreach(a=1:2) %dopar% { betaBinomialGLM(dgn_alt[[dgn_index]], dgn_n[[dgn_index]], dgn_x[[dgn_index]], dgn_null[[dgn_index]])$lrtp })[[1]]
bb_gtex=(foreach(a=1:2) %dopar% { betaBinomialGLM(alt.list[[gtex_index]],n.list[[gtex_index]],x.full[[gtex_index]],x.null[[gtex_index]])$lrtp })[[1]]
cat(gene_name, "BB DGN:",bb,"BB GTEX:",bb_gtex,"\n")
if (bb < 1e-2) {
grid.arrange( makePlot(alt.list[[gtex_index]],n.list[[gtex_index]],x.full[[gtex_index]]) + ggtitle(paste("GTEx:", format( bb_gtex, digits=2) ,gene_name )) + xlab(gtex_name), makePlot(dgn_alt[[dgn_index]], dgn_n[[dgn_index]], dgn_x[[dgn_index]]) +ggtitle(paste("DGN:", format( p[dgn_index], digits=2))  )+ xlab(gtex_name), nrow=1 )
}
}
}
length(original.index)
length(pos)
head(pos)
gtex_tested=pos[order_index]
head(locusinfo)
dim(locusinfo)
locusinfo$chrpos[ dgn_oi ]
locusinfo$chrpos[ dgn_oi ] -> dgn_tested
intersect( dgn_tested, gtex_tested)
head(dgn_tested)
head(gtex_tested)
gtex_tested=pos[ original.index ]
intersect( dgn_tested, gtex_tested)
length( intersect( dgn_tested, gtex_tested) )
ep=unlist(foreach (gtex_index=order(res$p.values)[1:10]) %dopar%  { betaBinomialGLM(alt.list[[gtex_index]],n.list[[gtex_index]],x.full[[gtex_index]],x.null[[gtex_index]])$lrtp } )
ep
source('~/Dropbox/mibi/enviro_code/gtex_vs_dgn_plots.R', echo=TRUE)
source('~/Dropbox/mibi/enviro_code/gtex_vs_dgn_plots.R', echo=TRUE)
getwd()
load("allp.RData")
load("geneNames.RData")
load("combined_environment.RData")
p=pvals[["Glearnt"]]
gn=list()
res=data.frame(env=character(), gene=character() )
for (i in 1:30){
gn[[ to.test[i] ]] =setdiff( unlist(strsplit( geneNames[ order(p[,i])[1:50] ], ",")), "-" )
res = rbind( res, data.frame(env=rep(to.test[i],length(gn[[ to.test[i] ]])), gene=gn[[ to.test[i] ]]) )
}
write.table(res,quote=F,row.names=F,file="Glearnt_for_go.txt",sep = ",")
gn=list()
res=data.frame(env=character(), gene=character() )
for (i in 1:30){
gn[[ to.test[i] ]] =setdiff( unlist(strsplit( geneNames[ !is.na(p[,i]) ], ",")), "-" )
res = rbind( res, data.frame(env=rep(to.test[i],length(gn[[ to.test[i] ]])), gene=gn[[ to.test[i] ]]) )
hypergeom = function(kk, nn, CC, GG) {
C = function(N,K) lgamma(N+1) - lgamma(K+1) - lgamma(N-K+1)
upper = min(nn, CC)
tmp=numeric(length(kk:upper))
for (ii in kk:upper)
tmp[ii] = C(CC,ii) + C(GG-CC, nn-ii) - C(GG, nn);
sum(exp(tmp[seq(upper,kk,-1)]))
}
}
gn=list()
res=data.frame(env=character(), gene=character() )
for (i in 1:30){
gn[[ to.test[i] ]] =setdiff( unlist(strsplit( geneNames[ order(p[,i])[1:50] ], ",")), "-" )
res = rbind( res, data.frame(env=rep(to.test[i],length(gn[[ to.test[i] ]])), gene=gn[[ to.test[i] ]]) )
}
hypergeom = function(kk, nn, CC, GG) {
C = function(N,K) lgamma(N+1) - lgamma(K+1) - lgamma(N-K+1)
upper = min(nn, CC)
tmp=numeric(length(kk:upper))
for (ii in kk:upper)
tmp[ii] = C(CC,ii) + C(GG-CC, nn-ii) - C(GG, nn);
sum(exp(tmp[seq(upper,kk,-1)]))
}
load("small_pathways.RData")
counts=pathw
load("~/enviro_code/geneNames.RData")
load("geneNames.RData")
load("combined_environment.RData")
pASE=pvals[["Glearnt"]]
k=50
p=matrix(NA,30,ncol(counts),dimnames=list(to.test[1:30],colnames(counts)))
randp=matrix(NA,30,ncol(counts),dimnames=list(to.test[1:30],colnames(counts)))
x=matrix(NA,30,ncol(counts),dimnames=list(to.test[1:30],colnames(counts)))
for (i in 1:30){
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x[i,]=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
for (j in 1:ncol(counts)){
if (m[j]>=5) {
#p[i,j]=phyper(q=x[i,j],m=m[j],n=n[j],k=length(geneList),lower.tail = F, log.p=T)
p[i,j]=hypergeom(x[i,j],length(geneList),m[j],m[j]+n[j])
#stopifnot(p[i,j]>0)
randx=sum( counts[sample(backgroundList,size = length(geneList)),j] )
#randp[i,j]=phyper(q=randx,m=m[j],n=n[j],k=length(geneList),lower.tail = F, log.p=T)
randp[i,j]=hypergeom(randx,length(geneList),m[j],m[j]+n[j])
}
}
}
q=p
numsig=numeric(30)
for (i in 1:30){
q[i,]=bh(p[i,])
cat(to.test[i],":",sum(q[i,]<.1,na.rm=T),"----------- \n")
numsig[i]=sum(q[i,]<.1,na.rm=T)
o=order(p[i,])[1:5]
for (j in 1:5){
cat(colnames(p)[o[j] ],":",p[i,o[j] ],"\n")
}
}
p[,"KEGG_LEISHMANIA_INFECTION"]=NA
rownames(p)=nice.names
library(reshape2)
library(ggplot2)
dat <- t(-log10(p))
dat=dat[colSums(p<.01)>0,]
#dat=dat[order(rowSums(dat>0),decreasing = T),order(colSums(dat>0),decreasing = T)]
dat2 <- melt(dat)
dat2=dat2[order(dat2$value,decreasing = T),]
colnames(dat2)=c("Geneset", "Environment", "-log10(P)")
head(dat2,10)
barplot(dat2[seq(10,1,-1),3],horiz = T, axes = F)
df=dat2[seq(10,1,-1),]
colnames(df)=c("geneset","env","score")
df$num=1:10
ggplot(df,aes(num,score,fill=-score))+scale_color_brewer(palette="Blues")+geom_bar(stat="identity") + coord_flip() + theme(axis.line=element_blank(),axis.text.x=element_blank(),axis.text.y=element_blank(),axis.ticks=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),legend.position="none",panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),panel.grid.minor=element_blank(),plot.background=element_blank())
#dat2=dat2[dat2$value>0,]
colnames(dat2)=c("X1","X2","Zscore")
theme_set(theme_gray(base_size = 18))
ggplot(dat2, aes(as.factor(X1), X2, group=X2)) + geom_tile(aes(fill = Zscore)) + geom_text(aes(fill = Zscore, label = format(Zscore, digits=1))) + scale_fill_gradient(low = "white", high = "red") + xlab("transcription factor") + ylab("environment") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
geneList
backgroundList
dim(counts)
counts[1:10,1:10]
hist(as.matrix(counts))
mean(as.matrix(counts))
dim(p)
p[1:10,1:10]
pqplot(as.numeric(p))
to.test
to.test[4]
i=4
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x[i,]=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
m_rand=colSums(counts[sample(backgroundList,size = length(geneList)),])
m_rand=foreach(perm_index=seq_len(100)) %dopar% colSums(counts[sample(backgroundList,size = length(geneList)),])
m_rand[[]]
m_rand[[1]]
str(m_rand)
m_rand=do.call(rbind,foreach(perm_index=seq_len(100)) %dopar% colSums(counts[sample(backgroundList,size = length(geneList)),]))
dim(m_rand)
length(x[i,])
x >= m_rand[i,]
sweep( m_rand, 1, x, "<=" )
sweep( m_rand, 2, x, "<=" )
length(x)
x=colSums(counts[geneList,])
sweep( m_rand, 2, x, "<=" )
dim(sweep( m_rand, 2, x, "<=" ))
colSums( sweep( m_rand, 2, x, "<=" ) )
colMeans( sweep( m_rand, 2, x, "<=" ) )
p=colMeans( sweep( m_rand, 2, x, "<=" ) )
qplot(p)
pqplot(p)
p=1-colMeans( sweep( m_rand, 2, x, "<=" ) )
pqplot(p)
p=1-colMeans( sweep( m_rand, 2, x, "<" ) )
length(p)
pqplot(p)
p=colMeans( sweep( m_rand, 2, x, ">" ) )
hist(p)
p=colMeans( sweep( m_rand, 2, x, "<" ) )
p=colMeans( sweep( m_rand, 2, x, ">" ) )
pqplot(p)
hist(x)
which.max(x)
p=colMeans( sweep( m_rand, 2, x, "<=" ) )
hist(p)
p=colMeans( sweep( m_rand, 2, x, "<" ) )
hist(p)
pqplot(p)
length(p)
p
m_rand[,1]
x[i]
p[1]
p=colMeans( sweep( m_rand, 2, x, ">" ) )
p[i]
p[1]
x[1]
m_rand[,1]
sweep( m_rand, 2, x, ">" )
p=colMeans( sweep( m_rand, 2, x, ">=" ) )
p[1]
hist(p)
min(p)
which.max(x)
p[96]
x[96]
m_rand[,96]
m_rand=do.call(rbind,foreach(perm_index=seq_len(1000)) %dopar% colSums(counts[sample(backgroundList,size = length(geneList)),]))
p=colMeans( sweep( m_rand, 2, x, ">=" ) )
p
hist(p)
min(p)
which.min(p)
p[412]
x[412]
hist(m_rand[,412])
m_rand=do.call(rbind,foreach(perm_index=seq_len(10000)) %dopar% colSums(counts[sample(backgroundList,size = length(geneList)),]))
hist(p)
pqplot(p)
perm_p=foreach (i=1:30) %do% {
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x=colSums(counts[geneList,])
m_rand=do.call(rbind,foreach(perm_index=seq_len(10000)) %dopar% colSums(counts[sample(backgroundList,size = length(geneList)),]))
colMeans( sweep( m_rand, 2, x, ">=" ) )
}
str(perm_[])
str(perm_p)
perm_p=do.call(cbind,perm_p)
dim(perm_[])
dim(perm_p)
hist(perm_p)
pqplot(perm_p)
p=matrix(NA,30,ncol(counts),dimnames=list(to.test[1:30],colnames(counts)))
for (i in 1:30){
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x[i,]=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
for (j in 1:ncol(counts)){
if (m[j]>=5) {
#p[i,j]=phyper(q=x[i,j],m=m[j],n=n[j],k=length(geneList),lower.tail = F, log.p=T)
p[i,j]=hypergeom(x[i,j],length(geneList),m[j],m[j]+n[j])
#stopifnot(p[i,j]>0)
#randx=sum( counts[sample(backgroundList,size = length(geneList)),j] )
#randp[i,j]=phyper(q=randx,m=m[j],n=n[j],k=length(geneList),lower.tail = F, log.p=T)
#randp[i,j]=hypergeom(randx,length(geneList),m[j],m[j]+n[j])
}
}
}
x=matrix(NA,30,ncol(counts),dimnames=list(to.test[1:30],colnames(counts)))
for (i in 1:30){
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x[i,]=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
for (j in 1:ncol(counts)){
if (m[j]>=5) {
#p[i,j]=phyper(q=x[i,j],m=m[j],n=n[j],k=length(geneList),lower.tail = F, log.p=T)
p[i,j]=hypergeom(x[i,j],length(geneList),m[j],m[j]+n[j])
#stopifnot(p[i,j]>0)
#randx=sum( counts[sample(backgroundList,size = length(geneList)),j] )
#randp[i,j]=phyper(q=randx,m=m[j],n=n[j],k=length(geneList),lower.tail = F, log.p=T)
#randp[i,j]=hypergeom(randx,length(geneList),m[j],m[j]+n[j])
}
}
}
dim(p)
dim(perm_p)
perm_p=t(perm_p)
plot(p, perm_p)
plot(-log10(p), -log10(perm_p))
abline(0,1)
sum(p<.05)
sum(p<.05,na.rm=T)
sum(perm_p<.05,na.rm=T)
sum(perm_p<.01,na.rm=T)
sum(p<.01,na.rm=T)
q=bh(p)
dim(q)
length(q)
sum(q<.1)
sum(q<.1,na.rm=T)
min(q)
min(q,na.rm=T)
sum(q<.2,na.rm=T)
sum(!is.na(q))
hist(q)
q_perm=bh(perm_p)
min(q_perm,na.rm=T)
sum(q_perm < .1)
sum(q_perm < .2)
sum(q_perm < .5)
hist(q_perm)
table(q_perm)
dim(p)
ks=c(10,20,50,100,200)
vary_k_results=foreach(k=ks) %do% {
do.call(rbind,foreach (i=1:30) %dopar% {
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
unlist( foreach (j=1:ncol(counts)) %do% {
if (m[j]>=5)
hypergeom(x[j],length(geneList),m[j],m[j]+n[j]) else NA
} )
})
}
str(vary_k_results)
foreach(res=vary_k_results) %do% sum(res<.01,na.rm=T)
unlist(foreach(res=vary_k_results) %do% sum(res<.01,na.rm=T))
num_sig=unlist(foreach(res=vary_k_results) %do% sum(res<.01,na.rm=T))
plot(ks, num_sig)
qplot(ks, num_sig)
qplot(ks, num_sig) + scale_x_log10()
qplot(ks, num_sig)
qplot(ks, num_sig, geom="bar")
qplot(ks, num_sig, geom="blank") + geom_bar(stat="identity")
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity")
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14)
ks=c(15,20,30,50,100,150,200)
vary_k_results=foreach(k=ks) %do% {
do.call(rbind,foreach (i=1:30) %dopar% {
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
unlist( foreach (j=1:ncol(counts)) %do% {
if (m[j]>=5)
hypergeom(x[j],length(geneList),m[j],m[j]+n[j]) else NA
} )
})
}
num_sig=unlist(foreach(res=vary_k_results) %do% sum(res<.01,na.rm=T))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14)
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14) + xlab("Top K genes per environment") + ylab("Number significant p<0.01")
?italic
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14) + xlab("Top K genes per environment") + ylab(paste0("Number significant",expression(italic(p)),"<0.01"))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14) + xlab("Top K genes per environment") + ylab(expression(paste0("Number significant",italic(p),"<0.01")))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14) + xlab("Top K genes per environment") + ylab(expression(paste("Number significant",italic(p),"<0.01")))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=14) + xlab("Top K genes per environment") + ylab(expression(paste("Number significant ",italic(p),"<0.01")))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=16) + xlab("Top K genes per environment") + ylab(expression(paste("Number significant ",italic(p),"<0.01")))
ks=c(10,15,20,30,50,100,150,200)
vary_k_results=foreach(k=ks) %do% {
do.call(rbind,foreach (i=1:30) %dopar% {
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
unlist( foreach (j=1:ncol(counts)) %do% {
if (m[j]>=5)
hypergeom(x[j],length(geneList),m[j],m[j]+n[j]) else NA
} )
})
}
num_sig=unlist(foreach(res=vary_k_results) %do% sum(res<.01,na.rm=T))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=16) + xlab("Top K genes per environment") + ylab(expression(paste("Number significant ",italic(p),"<0.01")))
ks=c(15,20,30,50,100,150,200) # get over 1500 with k=10!
vary_k_results=foreach(k=ks) %do% {
do.call(rbind,foreach (i=1:30) %dopar% {
print(i)
pp=pASE[,i]
geneList=unique(unlist(strsplit(  geneNames[order(pp)[1:k] ] , "," )))
geneList=intersect(geneList,rownames(counts))
backgroundList=unique(unlist(strsplit(  geneNames[ !is.na(pp) ] , "," )))
backgroundList=intersect(backgroundList,rownames(counts))
x=colSums(counts[geneList,])
m=colSums(counts[backgroundList,])
n=length(backgroundList) - m
unlist( foreach (j=1:ncol(counts)) %do% {
if (m[j]>=5)
hypergeom(x[j],length(geneList),m[j],m[j]+n[j]) else NA
} )
})
}
num_sig=unlist(foreach(res=vary_k_results) %do% sum(res<.01,na.rm=T))
qplot(factor(ks,ks), num_sig, geom="blank") + geom_bar(stat="identity") + theme_bw(base_size=16) + xlab("Top K genes per environment") + ylab(expression(paste("Number significant ",italic(p),"<0.01")))
ggsave("~/Dropbox/epistatic_ase/paper/supplementary_material/new_figures/varying_k_go_analysis.pdf",width=5,height=5)
dim(perm_p)
sum(perm_p<.01)
sum(perm_p<.1 * p<.1)
sum(perm_p<.1 & p<.1)
sum(perm_p<.1 & p<.1,na.rm=T)
sum(perm_p<.01 & p<.01,na.rm=T)
sum(perm_p<.01 | p<.01,na.rm=T)
145/159
16*22
results=foreach (which_gene=genes_to_test[1:10]) %dopar% {
print(which_gene)
exonic_snp_ind=which(locusinfo$gene==which_gene)
exonicSNP_ind=sapply(locusinfo[exonic_snp_ind,"chr_snp"],function(s) which( s==snps$chr_snp ))
exon_h1=t( 1-hap1[exonicSNP_ind,,drop=F] )
exon_h2=t( 1-hap2[exonicSNP_ind,,drop=F] )
ys=alt[,exonic_snp_ind,drop=F]
ns=ys + ref[,exonic_snp_ind,drop=F]
ns[ exon_h1==exon_h2 ]=0
ys[ exon_h1==exon_h2 ]=0
yflip=ns-ys
y_directed=ys
y_directed[ exon_h1==0 ]=yflip[ exon_h1==0 ]
gene_counts=ge[,which_gene]
ind=which(tss$geneName==which_gene)[1]
chr=tss$chr[ ind ]
ts=tss$tss[ ind ]
cisSnps=which(snpInfo$chrom==chr & (abs( ts - snpInfo$pos )<2e5))
unlist( foreach(cisSNP_ind=cisSnps) %do% {
h1=1-hap1[cisSNP_ind,]
h2=1-hap2[cisSNP_ind,]
xNull=list(cbind(1,h1,env),cbind(1,h2,env))
xFull=list(cbind(1,h1,env,env*h1),cbind(1,h2,env,env*h2))
if (rcond(xFull[[1]]+xFull[[2]]) > 1e-2) {
#res <- evalWithTimeout( { joint_linear_anova( y_directed, ns, gene_counts, est_library_size, xFull, xNull )$lrtp }, timeout = 10, onTimeout="silent" )
system.time( { res <- joint_linear_anova( y_directed, ns, gene_counts, est_library_size, xFull, xNull ) }  )[1]
if (is.null(res)) NA else res }
else NA
} )
}
setwd("~/Dropbox/mibi/enviro_code")
source('~/Dropbox/mibi/enviro_code/run_joint.R', echo=TRUE)
rm(list = ls())
setwd("~/Dropbox/mibi/enviro_code")
source('~/Dropbox/mibi/enviro_code/run_joint.R', echo=TRUE)
which_gene=genes_to_test[1]
print(which_gene)
exonic_snp_ind=which(locusinfo$gene==which_gene)
exonicSNP_ind=sapply(locusinfo[exonic_snp_ind,"chr_snp"],function(s) which( s==snps$chr_snp ))
exon_h1=t( 1-hap1[exonicSNP_ind,,drop=F] )
exon_h2=t( 1-hap2[exonicSNP_ind,,drop=F] )
ys=alt[,exonic_snp_ind,drop=F]
ns=ys + ref[,exonic_snp_ind,drop=F]
ns[ exon_h1==exon_h2 ]=0
ys[ exon_h1==exon_h2 ]=0
yflip=ns-ys
y_directed=ys
y_directed[ exon_h1==0 ]=yflip[ exon_h1==0 ]
gene_counts=ge[,which_gene]
ind=which(tss$geneName==which_gene)[1]
chr=tss$chr[ ind ]
ts=tss$tss[ ind ]
cisSnps=which(snpInfo$chrom==chr & (abs( ts - snpInfo$pos )<2e5))
cisSnps
cisSNP_ind=cisSnps[1]
h1=1-hap1[cisSNP_ind,]
h2=1-hap2[cisSNP_ind,]
xNull=list(cbind(1,h1,env),cbind(1,h2,env))
xFull=list(cbind(1,h1,env,env*h1),cbind(1,h2,env,env*h2))
joint_linear_anova( y_directed, ns, gene_counts, est_library_size, xFull, xNull )
setwd("~/Dropbox/eagle/eagle/beta_binomial_models/")
joint_model_linear=stan_model("joint_model_linear.stan", auto_write = F, save_dso = F)
gene_ase_linear=stan_model("gene_ase_linear.stan", auto_write = F, save_dso = F)
#gene_ase_linear_no_overdispersion=stan_model("gene_ase_linear_no_overdispersion.stan")
neg_bin_model=stan_model("neg_bin_glm.stan", auto_write = F, save_dso = F)
source('~/Dropbox/eagle/eagle/beta_binomial_models/joint_anova_linear.R', echo=TRUE)
source('~/Dropbox/mibi/enviro_code/run_joint.R', echo=TRUE)
joint_linear_anova( y_directed, ns, gene_counts, est_library_size, xFull, xNull )
